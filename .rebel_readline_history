1605368592756:(cljs->js {:a 1 :b 2})
1605368608597:(clj->js {:a 1 :b 2})
1605368633609:(println (clj->js {:a 1 :b2}))
1605368649197:(println (clj->js {:a 1 :b \n                  2}))
1605368672466:(. js/console -log "h")
1605368685412:(. js/console \n   log "h")
1605368708085:(. js/console log "what the fuck")
1605368721725:(.log js/console "what the fuck")
1605368727605:(.log js/console "what the ff\nk")
1605368756840:(. js/document getElementById "app")
1605368764447:(def app *1)
1605368774555:(. app children)
1605368785465:(. app -children)
1605368794273:(.-children app)
1605368826444:(. js/Math round 1.1)
1605368839043:(.roud js/Math 1.1)
1605368845294:(.round js/Math 1.1)
1605373477399:(require [figtest.torust3.logic :as logic])
1605373542341:(require '\n          figtest.torust3.logic)
1605373569059:(figtest.torust3.logic/allInd)
1605373669082:(alias 'logic 'figtest.torust3.logic)
1605373685425:(refer \n 'figtest.torust3.logic)
1605373698115:(allInd)
1605373777287:(logic/allInd)
1605373950204:(require '[figtest.torust3.logic :as logic])
1605373956415:(logic/allInd)
1605373983546:(require '[figtest.torust3.tests :as tests])
1605374045841:(= [[0 0] [1 1] [2 2]] (logic/boundedWinners? test/\n                         testboard1))
1605374061903:(= [[0 0] [1 1] [2 2]] (logic/boundedWinners? test/testboard1))
1605374073966:(= [[0 0] [1 1] [2 2]] (logic/boundedWinners? tests/testboard1))
1605374826254:(require '[figtest.torust3.logic :as logic])
1605374873418:(logic/totalBoard (logic/emptyBoard) [0 0] [3 3])
1605397207353:(.. js/window -location -url)
1605397226781:(. js/window -location)
1605397237441:(. js/window -location -href\n   )
1605397243367:(. js/window -location -href)
1605397252956:(.. js/window -location -href)
1605398305216:(index-of "hello" "o")
1605398406498:(clojure.string/index-of "hello" "o")
1605398418512:(clojure.string/index-of "hello" "t")
1605398606802:(getRoute)
1605398680738:(requie '[make100.core :as c])
1605398689562:(require '[make100.core :as c])
1605398695430:(c/getRoute)
1605399430087:(clojure.string/split "http#fuck" #"#")
1605399444779:(clojure.string/split "http" #"#")
1605399525945:(second *1)
1605399824711:(getRoute)
1605399867544:(require '[make100.core :as c])
1605399874370:(c/getRoute)
1605399971076:(defn f [] (fn [] 1))
1605399973926:(f)
1605399977093:((f))
1605399999564:(do (f))
1605400072393:((c/routeMap (c/getRoute)))
1605581333471:(read-string "")
1605581350399:(cljs.reader/read-string "")
1605581366914:(clojure.reader/read-string "")
1605581378272:(doc read-string)
1605581381787:(doc read)
1605581463545:(cljs.reader/read)
1605581477173:(cljs.reader/read-string "")
1605662419041:(require '[make100.link-stats.core :as ls])
1605662441348:@linkStatState
1605662447592:@ls/linkStatState
1605662473344:(keys (:blogs @ls/linkStatState))
1605665551435:(require '[make100.link-stats.core :as ls])
1605665597225:(->> @linkStatState\n     (:blogs)\n     )
1605665608606:@ls/linkStatState
1605754308310:(require '[make100.core :as mc])
1609894685043:(seq {:a 1 :b 2})
1609895325359:(doall (map even? (range 10)))
1609895353264:(doall (map even? []))
1609895362442:(doall (map even? []) (println 1))
1609977244820:(doc merge)
1609984121812:(sort-by second {:a 1 :b 4 :c 2})
1610066398952:(doc merge)
1610066404857:(doc merge-with)
1610066689485:(+ (:cnt {}) (:cnt {:cnt 1}))
1610066694171:(+ 1 nil)
1610066733219:(merge-with + (:links {}) (:links {:links {"me" 1}}))
1610067316705:(.. js/document getElementById "name")
1610067353092:(. js/document getElementById "name")
1610067636194:(.. js/document window width)
1610067654021:(.. js/document -\n  window width)
1610067674157:(. js/document -window)
1610067682211:(js/document -window)
1610067859790:(. js/document -window)
1610069108793:(get-in {:blogs {"sam" 2}} [:blogs "sam"])
1610069596821:(not= 1 2)
1610069776052:(str 1 "2")
1610148416658:(assoc {} :a 1 :b 2)
1610148954167:(doc swap!)
1610207094069:(doc deref)
1610207110608:(def a (atom 1))
1610207119492:(def b {1 a})
1610207128182:@(get b 1)
1610207567871:(def a {:a {:b 2} :c false})
1610207583855:(assoc-in a [:a :b] 3 [:c] true)
1610207593180:(doc assoc-in)
1610207875297:(doc doall\n     )
1610207909703:(doall (println "hi") (println "bye"))
1610207915651:(doall (println "hi") (println "bye") 1\n       )
1610207926134:(doall (println "hi") (println "bye") 1 2)
1610207940402:(doall '(\n         (println "hi") (println "bye") 1 2))
1610207959593:(doc doall)
1610208905079:(.. js/document getElementById "name" -offsetWidth)
1610208928059:(.\n js/document getElementById "name" -offsetWidth)
1610209012938:[200~(as-> (. js/document getElementById "name") $ ($ -offsetWidth))[201~\n                                                                          \n                                                                          \n                                                                          \n                                                                          cs\n                                                                      c\n                                                                      csaca)
1610209035248:(as-> (.js/document getElementById "name") $ ($ -offsetWidth))
1610209239744:(as-> (.js/document getElementById "name") $ (. \n                                              $ -offsetWidth))
1610209266490:(-> (. js/document getElementById "name") (.\n                  -offsetWidth))
1610209287270:(as-> (. js/document getElementById "names") (. -offsetWidth))
1610209296763:(-> (. js/document getElementById "names") (. -offsetWidth))
1610501473434:(map + [1 2 3] [1 2 3])
1610501480163:(doc map)
1610501596732:(map (fn [num b] (if b (inc num) num)) [0 0 0] [true false true])
1610501645999:(repeat 1)
1610501995502:(take 4 (repeat 10 "A"))
1610502036630:(repeat 10 "A")
1610502179846:sample->ratios
1610502207488:(make100.core.gpm/sample->ratios {})
1610502375201:(make100.core.gpm/sample->ratios {}\n                                 ))
1610502406444:(make100.gpm.core/sample->ratios {})
1610502414502:make100.gpm.core/sample->ratios
1610502591731:(def s {:data '([true true true] [false false false] [true false false]) :n 3 :labelCnt 3})
1610502593336:s
1610502610749:(make100.gpm.core/sample->ratios s)
1610502682716:s
1610502748109:(reduce (fn [cntAcc dataPoint] (map (fn [num b] (if b (inc num) num)) cntAcc dataPoint)) [0 0] [[true false] [true false]])
1610502756847:(:data s)
1610502881456:(reduce (fn [acc n m] (+ acc n m)) 0 [1 2 3] [1 2 3])
1610502966288:(vec 1 2)
1610502969909:(vector 1 2)
1610502984700:(map vector ["a" "b" "c"] [1 2 3])
1610502989813:(into {} *1)
1610503042006:(make100.gpm.core/sample->ratios s)
1610503055743:s
1610503057678:(make100.gpm.core/sample->ratios s)
1610503082415:s
1610503100588:(def s (assoc s :labels ["a" "b" "c"]))
1610503101319:s
1610503104507:(make100.gpm.core/sample->ratios s)
1610503239740:(rand)
1610503256729:(if (< 0.5 (rand)) 0 1)
1610503366800:(make100.gpm.core/sample->ratios make100.gpm.core/DUMMY_SAMPLE)
1610503465042:value
1610503580418:(.indexOf [1 2 3 4] 3)
1610503873255:(make100.gpm.core/conditionSample make100.gpm.core/DUMMY_SAMPLE "A" true)
1610503910523:(def d (make100.gpm.core/DUMMY_SAMPLE))
1610503919959:(def d make100.gpm.core/DUMMY_SAMPLE)
1610503921084:D
1610503923010:d
1610503960757:(make100.gpm.core/conditionSample make100.gpm.core/DUMMY_SAMPLE "A" true)
1610504237670:(dissoc [1 2 3 4] 0)
1610504247405:(doc dissoc)
1610504265431:(assoc [1 2 3] 3 "a")
1610504441162:(doc subvec)
1610504543351:(remove-index [0 1 2 3] 2)
1610504556598:(make100.gpm.core/remove-index [0 1 2 3] 2)
1610504620988:(let [v [0 1 2 3 4] i 2] (into (subvec v 0 i) (subvec (inc i) (count v))))
1610504662508:(let [v [0 1 2 3 4] i 2] (into (subvec v 0 i) (subvec v (inc i) (count v))))
1610504674314:(let [v [0 1 2 3 4] i 4] (into (subvec v 0 i) (subvec v (inc i) (count v))))
1610504730163:(make100.gpm.core/conditionSample make100.gpm.core/DUMMY_SAMPLE "A" true)
1610504786742:(make100.gpm.core/conditionSample make100.gpm.core/DUMMY_SAMPLE "B" true)
1610504803947:(make100.gpm.core/conditionSample make100.gpm.core/DUMMY_SAMPLE "B" false)
1610504812783:s
1610504830532:(make100.gpm.core/conditionSample make100.gpm.core/DUMMY_SAMPLE "A\n" false)
1610504841034:(make100.gpm.core/conditionSample make100.gpm.core/DUMMY_SAMPLE "A" false)
1610504848268:(make100.gpm.core/conditionSample make100.gpm.core/DUMMY_SAMPLE "A" true)
1610504860885:(make100.gpm.core/conditionSample make100.gpm.core/DUMMY_SAMPLE "B" true)
1610580878528:(str "1" 1.3)
1610581312273:(map (fn [k v] (println (str k v))) {:a 1 :b 2})
1610581381252:(map (fn [k v] (+ k v)) {1 1 2 2})
1610581389834:(map (fn [[k v]] (+ k v)) {1 1 2 2})
1610581400926:(map (fn [[k v]\n          ] (println (str k v))) {:a 1 :b 2})
1610581881260:(. js/Math round 1.2)
1610641149260:(assoc-in {} (seq [1 2 3]) :a)
1610641165768:(assoc-in {} (conj (seq [1 2 3]) 4) :a)
1610641202058:(assoc-in {} (conj \n              [1 2 3] 4) :a)
1610641229988:(defn f [a [b c :as id]] (println id))
1610641237256:(f 1 [2 3])
1610641612615:(assoc-in {} (conj [1] 4 :sample) :a)
1610641915942:(dissoc *1 [1 4])
1610641932660:(dissoc-in *2\n           [1 4])
1610641989746:(doc update-in)
1610642047429:(def m {1 {2 {3 {4 {:sample "sample"}}}}})
1610642064859:(update-in m [1 2 3 4] dissoc)
1610642086928:(update-in m [1 2 3] dissoc)
1610642130981:(update-in m [1 2 3] dissoc 4)
1610642255522:(def a [1 2 3 4])
1610642264707:(but-last a)
1610642301774:(butlast a)
1610642363622:(update-in m (butlast m) dissoc (last m))
1610642368378:m
1610642371043:a
1610642379917:(update-in m (butlast a) dissoc (last a))
1610642412071:(def m {1 {2 {3 {:sample "s" 4 {:sample "sample"}}}}})
1610642413759:(update-in m (butlast a) dissoc (last a))
