1605368592756:(cljs->js {:a 1 :b 2})
1605368608597:(clj->js {:a 1 :b 2})
1605368633609:(println (clj->js {:a 1 :b2}))
1605368649197:(println (clj->js {:a 1 :b \n                  2}))
1605368672466:(. js/console -log "h")
1605368685412:(. js/console \n   log "h")
1605368708085:(. js/console log "what the fuck")
1605368721725:(.log js/console "what the fuck")
1605368727605:(.log js/console "what the ff\nk")
1605368756840:(. js/document getElementById "app")
1605368764447:(def app *1)
1605368774555:(. app children)
1605368785465:(. app -children)
1605368794273:(.-children app)
1605368826444:(. js/Math round 1.1)
1605368839043:(.roud js/Math 1.1)
1605368845294:(.round js/Math 1.1)
1605373477399:(require [figtest.torust3.logic :as logic])
1605373542341:(require '\n          figtest.torust3.logic)
1605373569059:(figtest.torust3.logic/allInd)
1605373669082:(alias 'logic 'figtest.torust3.logic)
1605373685425:(refer \n 'figtest.torust3.logic)
1605373698115:(allInd)
1605373777287:(logic/allInd)
1605373950204:(require '[figtest.torust3.logic :as logic])
1605373956415:(logic/allInd)
1605373983546:(require '[figtest.torust3.tests :as tests])
1605374045841:(= [[0 0] [1 1] [2 2]] (logic/boundedWinners? test/\n                         testboard1))
1605374061903:(= [[0 0] [1 1] [2 2]] (logic/boundedWinners? test/testboard1))
1605374073966:(= [[0 0] [1 1] [2 2]] (logic/boundedWinners? tests/testboard1))
1605374826254:(require '[figtest.torust3.logic :as logic])
1605374873418:(logic/totalBoard (logic/emptyBoard) [0 0] [3 3])
1605397207353:(.. js/window -location -url)
1605397226781:(. js/window -location)
1605397237441:(. js/window -location -href\n   )
1605397243367:(. js/window -location -href)
1605397252956:(.. js/window -location -href)
1605398305216:(index-of "hello" "o")
1605398406498:(clojure.string/index-of "hello" "o")
1605398418512:(clojure.string/index-of "hello" "t")
1605398606802:(getRoute)
1605398680738:(requie '[make100.core :as c])
1605398689562:(require '[make100.core :as c])
1605398695430:(c/getRoute)
1605399430087:(clojure.string/split "http#fuck" #"#")
1605399444779:(clojure.string/split "http" #"#")
1605399525945:(second *1)
1605399824711:(getRoute)
1605399867544:(require '[make100.core :as c])
1605399874370:(c/getRoute)
1605399971076:(defn f [] (fn [] 1))
1605399973926:(f)
1605399977093:((f))
1605399999564:(do (f))
1605400072393:((c/routeMap (c/getRoute)))
1605581333471:(read-string "")
1605581350399:(cljs.reader/read-string "")
1605581366914:(clojure.reader/read-string "")
1605581378272:(doc read-string)
1605581381787:(doc read)
1605581463545:(cljs.reader/read)
1605581477173:(cljs.reader/read-string "")
1605662419041:(require '[make100.link-stats.core :as ls])
1605662441348:@linkStatState
1605662447592:@ls/linkStatState
1605662473344:(keys (:blogs @ls/linkStatState))
1605665551435:(require '[make100.link-stats.core :as ls])
1605665597225:(->> @linkStatState\n     (:blogs)\n     )
1605665608606:@ls/linkStatState
1605754308310:(require '[make100.core :as mc])
1609894685043:(seq {:a 1 :b 2})
1609895325359:(doall (map even? (range 10)))
1609895353264:(doall (map even? []))
1609895362442:(doall (map even? []) (println 1))
1609977244820:(doc merge)
1609984121812:(sort-by second {:a 1 :b 4 :c 2})
1610066398952:(doc merge)
1610066404857:(doc merge-with)
1610066689485:(+ (:cnt {}) (:cnt {:cnt 1}))
1610066694171:(+ 1 nil)
1610066733219:(merge-with + (:links {}) (:links {:links {"me" 1}}))
1610067316705:(.. js/document getElementById "name")
1610067353092:(. js/document getElementById "name")
1610067636194:(.. js/document window width)
1610067654021:(.. js/document -\n  window width)
1610067674157:(. js/document -window)
1610067682211:(js/document -window)
1610067859790:(. js/document -window)
1610069108793:(get-in {:blogs {"sam" 2}} [:blogs "sam"])
1610069596821:(not= 1 2)
1610069776052:(str 1 "2")
1610148416658:(assoc {} :a 1 :b 2)
1610148954167:(doc swap!)
1610207094069:(doc deref)
1610207110608:(def a (atom 1))
1610207119492:(def b {1 a})
1610207128182:@(get b 1)
1610207567871:(def a {:a {:b 2} :c false})
1610207583855:(assoc-in a [:a :b] 3 [:c] true)
1610207593180:(doc assoc-in)
1610207875297:(doc doall\n     )
1610207909703:(doall (println "hi") (println "bye"))
1610207915651:(doall (println "hi") (println "bye") 1\n       )
1610207926134:(doall (println "hi") (println "bye") 1 2)
1610207940402:(doall '(\n         (println "hi") (println "bye") 1 2))
1610207959593:(doc doall)
1610208905079:(.. js/document getElementById "name" -offsetWidth)
1610208928059:(.\n js/document getElementById "name" -offsetWidth)
1610209012938:[200~(as-> (. js/document getElementById "name") $ ($ -offsetWidth))[201~\n                                                                          \n                                                                          \n                                                                          \n                                                                          cs\n                                                                      c\n                                                                      csaca)
1610209035248:(as-> (.js/document getElementById "name") $ ($ -offsetWidth))
1610209239744:(as-> (.js/document getElementById "name") $ (. \n                                              $ -offsetWidth))
1610209266490:(-> (. js/document getElementById "name") (.\n                  -offsetWidth))
1610209287270:(as-> (. js/document getElementById "names") (. -offsetWidth))
1610209296763:(-> (. js/document getElementById "names") (. -offsetWidth))
1610501473434:(map + [1 2 3] [1 2 3])
1610501480163:(doc map)
1610501596732:(map (fn [num b] (if b (inc num) num)) [0 0 0] [true false true])
1610501645999:(repeat 1)
1610501995502:(take 4 (repeat 10 "A"))
1610502036630:(repeat 10 "A")
1610502179846:sample->ratios
1610502207488:(make100.core.gpm/sample->ratios {})
1610502375201:(make100.core.gpm/sample->ratios {}\n                                 ))
1610502406444:(make100.gpm.core/sample->ratios {})
1610502414502:make100.gpm.core/sample->ratios
1610502591731:(def s {:data '([true true true] [false false false] [true false false]) :n 3 :labelCnt 3})
1610502593336:s
1610502610749:(make100.gpm.core/sample->ratios s)
1610502682716:s
1610502748109:(reduce (fn [cntAcc dataPoint] (map (fn [num b] (if b (inc num) num)) cntAcc dataPoint)) [0 0] [[true false] [true false]])
1610502756847:(:data s)
1610502881456:(reduce (fn [acc n m] (+ acc n m)) 0 [1 2 3] [1 2 3])
1610502966288:(vec 1 2)
1610502969909:(vector 1 2)
1610502984700:(map vector ["a" "b" "c"] [1 2 3])
1610502989813:(into {} *1)
1610503042006:(make100.gpm.core/sample->ratios s)
1610503055743:s
1610503057678:(make100.gpm.core/sample->ratios s)
1610503082415:s
1610503100588:(def s (assoc s :labels ["a" "b" "c"]))
1610503101319:s
1610503104507:(make100.gpm.core/sample->ratios s)
1610503239740:(rand)
1610503256729:(if (< 0.5 (rand)) 0 1)
1610503366800:(make100.gpm.core/sample->ratios make100.gpm.core/DUMMY_SAMPLE)
1610503465042:value
1610503580418:(.indexOf [1 2 3 4] 3)
1610503873255:(make100.gpm.core/conditionSample make100.gpm.core/DUMMY_SAMPLE "A" true)
1610503910523:(def d (make100.gpm.core/DUMMY_SAMPLE))
1610503919959:(def d make100.gpm.core/DUMMY_SAMPLE)
1610503921084:D
1610503923010:d
1610503960757:(make100.gpm.core/conditionSample make100.gpm.core/DUMMY_SAMPLE "A" true)
1610504237670:(dissoc [1 2 3 4] 0)
1610504247405:(doc dissoc)
1610504265431:(assoc [1 2 3] 3 "a")
1610504441162:(doc subvec)
1610504543351:(remove-index [0 1 2 3] 2)
1610504556598:(make100.gpm.core/remove-index [0 1 2 3] 2)
1610504620988:(let [v [0 1 2 3 4] i 2] (into (subvec v 0 i) (subvec (inc i) (count v))))
1610504662508:(let [v [0 1 2 3 4] i 2] (into (subvec v 0 i) (subvec v (inc i) (count v))))
1610504674314:(let [v [0 1 2 3 4] i 4] (into (subvec v 0 i) (subvec v (inc i) (count v))))
1610504730163:(make100.gpm.core/conditionSample make100.gpm.core/DUMMY_SAMPLE "A" true)
1610504786742:(make100.gpm.core/conditionSample make100.gpm.core/DUMMY_SAMPLE "B" true)
1610504803947:(make100.gpm.core/conditionSample make100.gpm.core/DUMMY_SAMPLE "B" false)
1610504812783:s
1610504830532:(make100.gpm.core/conditionSample make100.gpm.core/DUMMY_SAMPLE "A\n" false)
1610504841034:(make100.gpm.core/conditionSample make100.gpm.core/DUMMY_SAMPLE "A" false)
1610504848268:(make100.gpm.core/conditionSample make100.gpm.core/DUMMY_SAMPLE "A" true)
1610504860885:(make100.gpm.core/conditionSample make100.gpm.core/DUMMY_SAMPLE "B" true)
1610580878528:(str "1" 1.3)
1610581312273:(map (fn [k v] (println (str k v))) {:a 1 :b 2})
1610581381252:(map (fn [k v] (+ k v)) {1 1 2 2})
1610581389834:(map (fn [[k v]] (+ k v)) {1 1 2 2})
1610581400926:(map (fn [[k v]\n          ] (println (str k v))) {:a 1 :b 2})
1610581881260:(. js/Math round 1.2)
1610641149260:(assoc-in {} (seq [1 2 3]) :a)
1610641165768:(assoc-in {} (conj (seq [1 2 3]) 4) :a)
1610641202058:(assoc-in {} (conj \n              [1 2 3] 4) :a)
1610641229988:(defn f [a [b c :as id]] (println id))
1610641237256:(f 1 [2 3])
1610641612615:(assoc-in {} (conj [1] 4 :sample) :a)
1610641915942:(dissoc *1 [1 4])
1610641932660:(dissoc-in *2\n           [1 4])
1610641989746:(doc update-in)
1610642047429:(def m {1 {2 {3 {4 {:sample "sample"}}}}})
1610642064859:(update-in m [1 2 3 4] dissoc)
1610642086928:(update-in m [1 2 3] dissoc)
1610642130981:(update-in m [1 2 3] dissoc 4)
1610642255522:(def a [1 2 3 4])
1610642264707:(but-last a)
1610642301774:(butlast a)
1610642363622:(update-in m (butlast m) dissoc (last m))
1610642368378:m
1610642371043:a
1610642379917:(update-in m (butlast a) dissoc (last a))
1610642412071:(def m {1 {2 {3 {:sample "s" 4 {:sample "sample"}}}}})
1610642413759:(update-in m (butlast a) dissoc (last a))
1610756011456:(interleave [1 2 3 4] (repeat "X"))
1610756026071:(interleave (repeat "X") [1 2 3 4])
1610757334492:(conj (interleave (repeat "S") [1 2 3]) 8)
1610762528059:(get-in {:node 1} [])
1610762550063:(get-in {:node 1} (interleave (repeat :children) []))
1610764437994:(not-empty [])
1610764444683:(empty? [])
1610764456065:(not-empty? [])
1610764499407:(if [] 1 2)
1610764509742:(if [1 2] 1 2)
1610764520264:(if (seq []) 1 2)
1610765166766:(count {:1 2})
1610765473015:(if flase 1)
1610765478250:(if false 1)
1610765891603:(def f (fn []))
1610765894120:(f)
1610766514601:(get #{} "A")
1610768982757:(nil)
1610769072516:(if (fn []) 1 2)
1610769076865:(if nil 1 2)
1610770012394:(update {:s {}} :s assoc :a 1)
1610770081444:(update *1 :s assoc :b2 1)
1610770100320:(update *1 :s assoc :b2 3\n        )
1610770197904:(defn f [m label v] (if-let [s (get m label)] (assoc m (conj s v)) m))
1610770562355:[(defn updateSelectedLabels [selectedLabels label value]\n        (if-let [s (get selectedLabels label)]\n          (assoc m (conj s value))\n          (assoc m #{value})))\n  )
1610770578898:(defn updateSelectedLabels [selectedLabels label value]\n	(if-let [s (get selectedLabels label)]\n		(assoc m (conj s value))\n		(assoc m #{value})))
1610770606603:(defn updateSelectedLabels [selectedLabels label value]\n	(if-let [s (get selectedLabels label)]\n		(assoc selectedLabels (conj s value))\n		(assoc selectedLabels #{value})))
1610770636458:(defn updateSelectedLabels [selectedLabels label value]\n	(if-let [s (get selectedLabels label)]\n		(assoc selectedLabels label (conj s value))\n		(assoc selectedLabels label #{value})))
1610770658947:(updateSelectedLabels {} "A" true)
1610770670272:(updateSelectedLabels {"A" #{false}} "A" true)
1610775632957:(dissoc #{1 2} 2)
1610775670456:(disj #{1 2} 1)
1610775862820:(defn removeSelectedLabel [selectedLabels [label value]]\n	(let [s (disj (get selectedLabels label) value)]\n		(if (empty? s)\n			(dissoc selectedLabels label)\n			(assoc selectedLabels label s))))
1610775886085:(removeSelectedLabel {"A" #{true}} ["A" true])
1610775894201:(removeSelectedLabel {"A" #{true false}} ["A" true])
1610775908037:(removeSelectedLabel {"A" #{true false} "B" #{true}} ["A" true])
1610845652317:(def m {#{["A" true] ["B" true]} 1})
1610845681382:(get m #{["B" true] ["A" true]})
1610845718760:(into #{} {"A" true "B" false})
1610846053733:(into {"A" 1} [["B" 2] ["C" 4]])
1610846435371:(flatten [#{1} #{2}])
1610846441673:(doc flatten)
1610846504939:(into #{} #{1 2 3 4})
1610846655853:(into #{} #{})
1610846889007:(make100.gpm.core/runGraph FORK)
1610846939945:(make100.gpm.core/runGraph make100.gpm.core/FORK)
1610846965881:(make100.gpm.core/FORK)
1610846972028:make100.gpm.core/FORK
1610846995663:refresh
1610846999047:(refresh)
1610847105905:make100.gpm.core/FORK
1610847111409:(make100.gpm.core/runGraph make100.gpm.core/FORK)
1610847249047:(def f make100.gpm.core/FORK)
1610847381581:(let [p (get-in f ["A" :trigger (into #{} {})]) n (< (rand) p)] {"A" n})
1610847389391:(make100.gpm.core/runGraph make100.gpm.core/FORK)
1610847727777:(rand)
1610847731437:(make100.gpm.core/runGraph make100.gpm.core/FORK)
1610847776705:(< (rand) 0.9)
1610847814974:[A\n \n ]
1610847820458:(make100.gpm.core/runGraph make100.gpm.core/FORK)
1610848222349:(filter even? {1 "A" 2 "B" 3 "$"})
1610848265267:(filter #(even? (second %)) {1 "A" 2 "B" 3 "$"})
1610848275099:(filter #(even? (first %)) {1 "A" 2 "B" 3 "$"})
1610848469334:(make100.gpm.core/runGraph make100.gpm.core/FORK)
1610848916582:(reduce #(into %1 (get-in make100.gpm.core/FORK [%2 :next])) #{} #{"B"})
1610848955688:(get-in make100.gpm.core/FORK ["B" :next]))
1610849209037:(make100.gpm.core/runGraph make100.gpm.core/FORK)
1610849320195:(get-in make100.gpm.core/FORK ["B" :next]))
1610849338559:make100.gpm.core/FORK
1610849345268:(get-in make100.gpm.core/FORK ["B" :next]))
1610849357939:(reduce #(into %1 (get-in make100.gpm.core/FORK [%2 :next])) #{} #{"B"})
1610849378712:(make100.gpm.core/runGraph make100.gpm.core/FORK)
1610849447429:(def f make100.gpm.core/FORK)
1610849466400:make100.gpm.core/FORK
1610849740406:make100.gpm.core/CHAIN
1610849753498:(def f *2\n  )
1610849759867:(make100.gpm.core/runGraph make100.gpm.core/CHAIN)
1610849771871:(make100.gpm.core/runGraph make100.gpm.core/FORK)
1610850007510:(make100.gpm.core/runGraph make100.gpm.core/COLLIDER)
1610850207357:(doc repeat)
1610850219041:(doc repeatedly)
1610850314962:{"A" 1 "B" 2 "C" 3}
1610850328937:{"A" 1 "B" 2 "D" 4 "C" 3}
1610850347505:(sort-by first {"A" 1 "B" 2 "D" 4 "C" 3})
1610850557207:(make100.gpm.core/graph->sample make100.gpm.core/CHAIN 10)
1610850664029:(make100.gpm.core/runGraph make100.gpm.core/CHAIN)
1610850668672:(def r *1)
1610850676001:(sort-by first r)
1610850699205:(reduce #(conj %1 (second %2)) [] *1)
1610850730077:(reduce #(conj %1 (second %2) [] *1)\n        )
1610850740756:(make100.gpm.core/graph->sample make100.gpm.core/CHAIN 10)
1610981028284:(first {:a 1})
1610981077527:(first {#{[:a 1] [:b 2]} 0})
1610981086809:(ffirst {#{[:a 1] [:b 2]} 0})
1610981115501:(->> (ffirst {#{[:a 1] [:b 2]} 0})\n     (map first))
1610981127596:(->> (ffirst {#{[:a 1] [:b 2]} 0})\n     (map first)\n     (sort))
1610981142156:(->> (ffirst {#{["A" 1] ["B" 2]} 0})\n     (map first)\n     (sort))
1610981202760:(->> (ffirst {#{} 0})\n     (map first)\n     (sort))
1610981534934:(sort-by first #{["Z" 1] ["H" 1] ["A" 1]})
1611021004850:(empty? nil)
1611021050624:(seq nil)
1611021055672:(seq {})
1611107950121:(mod 10 3)
1611108032307:(defn f [r] (/ (mod (+ (* r 10) 5)10) 10))
1611108036405:(f (rand))
1611108051870:(defn f [r] [r (/ (mod (+ (* r 10) 5)10) 10)])
1611108053017:(f (rand))
1611108495157:(defn probCycle [r i]\n	(-> (* r 10)\n		(+ i)\n		(mod 10)\n		(/ 10)))
1611108510850:(probCycle 0.9 1.25)
1611108523074:(probCycle 0.8\n           1.25)
1611108532965:(probCycle 0.5 2.5)
1611108641690:(probCycle 0.2 5)
1611108646843:(defn probCycle [r i]\n	(-> (* r 10)\n		(+ i)\n		(mod 10)\n		(/ 10)))
1611108650802:(probCycle 0.2 5)
1611110939917:quit
1611804434319:(range 0 10 0.5)
1611804449615:(range 0 10 0.001)
1611804487110:(range 0 10 0.1)
1611804534756:(vec 1 2)
1611804539354:(vector 1 2)
1611805512431:(for [x (range 10)] x)
1611805965013:(sign -1)
1611806038742:(doc cond)
1611806112355:(make100.evosim.core/sign 2)
1611806122837:(make100.evosim.core/sign)
1611844307030:(range (bigInt 1))
1611844344181:(range 10N)
1611844349680:10000000000000000000000000000000000
1611844352987:10000000000000000000000000000000000N
1611844387895:(make100.evosim.core/fact 10)
1611844391943:(make100.evosim.core/fact 12)
1611844396421:(make100.evosim.core/fact 15)
1611844402018:(make100.evosim.core/fact 20)
1611844461839:(make100.evosim.core/choose 4 2)
1611844466164:(make100.evosim.core/choose 4 4)
1611844468426:(make100.evosim.core/choose 4 1)
1611844503094:(make100.evosim.core/choose 4 4)
1611844507204:(make100.evosim.core/choose 4 2)
1611844512226:(make100.evosim.core/choose 5 1)
1611844538742:(make100.evosim.core/bates 1 0.5)
1611844544563:(make100.evosim.core/bates 1 0.8)
1611844548732:(make100.evosim.core/bates 2 0.8)
1611844588402:(map (partial make100.evosim.core/bates 1) (range 0 1 0.1))
1611844594696:(map (partial make100.evosim.core/bates 2) (range 0 1 0.1))
1611844611690:(map (partial make100.evosim.core/bates 3) (range 0 1 0.1))
1611844639541:(reduce + (map (partial make100.evosim.core/bates 3) (range 0 1 0.1)))
1611855562852:(doc doall)
1611855578152:(doc doseq)
1611855837893:(doc identity)
1611857166103:(make100.evosim.logic/func->points identity 0 10 10)
1611857170873:(make100.evosim.logic/func->points identity 0 10 11)
1611857176850:(make100.evosim.logic/func->points identity 0 10 20)
1611857215745:(/ 10 19\n   )
1611857250660:(* *1 20)
1611857316190:(make100.evosim.logic/func->points identity 0 1 2)
1611857322077:(make100.evosim.logic/func->points identity 0 1 3)
1611857327293:(make100.evosim.logic/func->points identity 0 1 4)
1611857565454:(make100.evosim.logic/func->points identity 0 1 5)
1611857597056:(range 0 1 0.25)
1611857618194:(range 0 1.25 0.25)
1611860232920:(map #(make100.evosim.logic/integrate identity 0 10 %) (range 10 40 5))
1611860244761:(map #(make100.evosim.logic/integrate identity 0 10 %) (range 10 100 5))
1611860265971:(map #(make100.evosim.logic/integrate identity 0 10 %) (range 10 200 5))
1611860284586:(map #(make100.evosim.logic/integrate identity 0 5 %) (range 10 200 5))
1611866952416:(map #(make100.evosim.logic/integrate (fn [x] (* x x)) 0 3 %) (range 10 100 5))
1611867183790:(make100.evosim.logic/integrate (fn [x] (* x x)) 0 3 10)
1611873381473:(range 0 3 0.3)
1611873394720:(range 0 10 1)
1611873425155:(range 0 10 0.5)
1611873470729:(range 0 1 0.5)
1611873475255:(range 0 1 0.25)
1611873485024:(range 0 1 0.3)
1611873525905:(range 0 (- 3 0.001 0.3))
1611873533692:(range 0 (- 3 0.001) 0.3)
1611875135139:(range 1 1)
1611875148415:(range a 2)
1611875151699:(range 1 2)
1611875181734:(make100.evosim.logic/fact 1)
1611875184359:(make100.evosim.logic/fact 0)
1611875186554:(make100.evosim.logic/fact 2)
1611875188703:(make100.evosim.logic/fact 3)
1611875191373:(make100.evosim.logic/fact 4)
1611875644749:(. js/Math pow -1 1)
1611875647236:(. js/Math pow -1 2)
1611875649239:(. js/Math pow -1 3)
1611875651813:(. js/Math pow -1 100)
1611876285962:(comp #(* 10 %) #(+ 10 %))
1611876295252:(def f (comp #(* 10 %) #(+ 10 %)))
1611876329534:(f 5)
1611876349049:(f 10)
1611876416693:(f 100)
1611886540240:(doc do)
1611889798905:(make100.evosim.logic/func->points (partial make100.evosim.logic/wigner-semicircle 5) -6 6 20)
1611889832396:(make100.evosim.logic/wigner-semicircle 5 2)
1611889837487:(make100.evosim.logic/wigner-semicircle 5 0)
1611889851042:(. js/Math -pi)
1611889855109:(. js/Math -Pi)
1611889873199:(. js/Math -PI)
1611889888384:(make100.evosim.logic/wigner-semicircle 5 0)
1611889893743:(. js/Math -PI)
1611889897944:(make100.evosim.logic/wigner-semicircle 5 0)
1611889923122:(/ 2 (* (. js/Math -PI) (* 5 5)))
1611889938010:(. js/Math sqrt 2)
1611889959294:(. js/Math sqrt (- (* 5 5) (* 2 2)))
1611889966770:(* *3 *2)
1611889971787:(make100.evosim.logic/wigner-semicircle 5 0)
1611889976449:(make100.evosim.logic/wigner-semicircle 5 2)
1611890030036:(def f #(/ 2 (* (. js/Math -PI) (* % %))))
1611890032412:(f 5)
1611890086451:(def g #(. js/Math sqrt (- (* %1 %1) (* %2 %2))))
1611890089901:(g 5 0)
1611890116353:(def h #(* (f %1) (g %1 %2)))
1611890119544:(h 5 0)
1611890157085:(doc neg)
1611890209972:(make100.evosim.logic/wigner-semicircle 5 2)
1611890216717:(make100.evosim.logic/wigner-semicircle 5 1)
1611890227752:(make100.evosim.logic/neg 3)
1611890249117:(make100.evosim.logic/wigner-semicircle 5 1)
1611890252964:(make100.evosim.logic/wigner-semicircle 5 2)
1611959463061:(map (partial make100.evosim.logic/trunacted-normal -1 1 0 1) (range -2 2 0.25))
1611959503826:(make100.evosim.logic/trunacted-normal -1 1 0 1 0)
1611959540622:(make100.evosim.logic/truncated-normal -1 1 0 1 0)
1611959565209:(type make100.evosim.logic/truncated-normal)
1611959581346:(def f make100.evosim.logic/truncated-normal)
1611959589132:(f -1 1 0 1 0)
1611959606063:(f 1 1 0 1 0)
1611959615581:(def f make100.evosim.logic/truncated-normal)
1611959616917:(f 1 1 0 1 0)
1611959622415:(f -1 1 0 1 0)
1611959639124:(map (partial make100.evosim.logic/truncated-normal -1 1 0 1) (range -2 2 0.25))
1611961229117:(doc map)
1611961236423:(doc +)
1611961322095:(defn f [& more] (count more))
1611961326440:(f 1 2 3 4)
1611961520330:(apply str [1 2 3])
1611961612183:(make100.evosim.logic/do-with-args + * / -)
1611961632750:(make100.evosim.core/do-with-args + * / -)
1611961638471:(def f *1)
1611961641629:(type f)
1611961649244:(f 1 2)
1611961719321:(make100.evosim.core/do-with-args #(println (+ %1 %2))\n                                  #(println (* %1 %2))\n                                  #(println (/ %1 %2))\n                                  #(println (- %1 %2)))
1611961724203:(def f *1)
1611961727249:(f 1 2)
1611961767288:(make100.evosim.core/do-with-args #(println (+ %1 %2))\n                                  #(println (* %1 %2))\n                                  #(println (/ %1 %2))\n                                  #(println (- %1 %2)))
1611961770982:(def f *1)
1611961774067:(f 1 2)
1612310922057:(. js/Math pow 2 8)
1612310925756:(. js/Math pow 2 3)
1612310927984:(. js/Math pow 2 4)
1612310932041:(. js/Math pow 2 5\n   )
1612310936250:(. js/Math pow 2 6)
1612310938703:(. js/Math pow 2 7)
1612312627864:(mod5 2)
1612312631871:(mod 5 2)
1612312638296:(mod 5.2 2)
1612312702398:(doc comp)
1612312708181:(doc cond)
1612312728731:(doc case)
1612312774616:(cond (< 1 -1) 1 (= 1 3) 2 (= 3 3) 4)
1612314054004:(make100.evosim.hsl->rgbInt [100 0 0])
1612314072579:(make100.evosim.logic/hsl->rgbInt [100 0 0])
1612314087444:(make100.evosim.logic/hsl->rgbInt [100 1 0.5])
1612314091545:(make100.evosim.logic/hsl->rgbInt [100 1 1])
1612314104314:(make100.evosim.logic/hsl->rgbInt [100 0.99 0.99])
1612315634907:(rand)
1612316300619:(def f make100.evosim.logic/binary-search-inverse)
1612316326602:(f identity 0 10 5 1 0.001)
1612316336270:(f identity 0 10 10 1 0.001)
1612316342300:(f identity 0 10 0 1 0.001)
1612316350439:(f identity 0 10 0 9.9 0.001)
1612316374951:(f #(* % %) 0 100 4 10 0.001)
1612316388429:(f #(* % %) 0 100 2 10 0.001)
1612316896364:(make100.evosim.logic/sample-tr-norm -2 2 0 0.5)
1612317578726:(def sf (make100.evosim.logic/sample-tr-norm 0 1 0.5 0.125))
1612317581348:(sf)
1612317595049:(def sf #(make100.evosim.logic/sample-tr-norm 0 1 0.5 0.125))
1612317596521:(sf)
1612317626891:(make100.evosim.logic/replicateVal 100 sf)
1612317645691:(def sf #(make100.evosim.logic/sample-tr-norm 0 1 0.5 0.1))
1612317647793:(make100.evosim.logic/replicateVal 100 sf)
1612317683019:(make100.evosim.logic/replicateVal 10 sf)
1612484877653:(make100.evosim.logic/polar->cart [10 0.78])
1612484895885:(make100.evosim.logic/polar->cart [10 0])
1612484904655:(make100.evosim.logic/polar->cart [10 6.2])
1612484915691:(make100.evosim.logic/polar->cart [10 6.28])
1612485766396:(doc mod)
1612485769688:(doc rem)
1612485802068:(quot 180 30)
1612485806868:(doc quot)
1612485816422:(doc 181 30)
1612485823795:(quot 181 30)
1612485831070:(quot 179 30)
1612485865847:(map #(quot % 60) (range 0 360 30))
1612486038847:(make100.evosim.logic/fill-hue-graph 0 0 0 60 (range 0 360 30) 0 0)
1612486143972:(make100.evosim.logic/fill-hue-graph)
1612486209016:(make100.evosim.core/fill-hue-graph 0 0 0 60 (range 0 360 30) 0 0)
1612487116795:(repeatedly 10 rand)
1612487135646:(repeatedly 10 (fn [] (* 360 (rand))))
1612487228804:(first {:A 1 2 3})
1612487249444:(into [] (first {1 2 3 4}))
1612487320519:(vec (first {1 2 3 4}))
1612487325797:(vector (first {1 2 3 4}))
1612575245894:(flatten (map (fn [x] (repeatedly 2 (rand))) (range 4)))
1612575254963:(flatten (map (fn [x] (repeatedly 2 #(rand))) (range 4)))
1612575263320:(map (fn [x] (repeatedly 2 #(rand))) (range 4))
1612577347388:(make100.evosim.core/dummy-pop 10)
1612921391881:(make100.evosim.logic/pop->bin [0 1 2 3 4 5 6 7 9 10] 5)
1612921442499:(make100.evosim.logic/pop->bin [0 1 2 3 4 5 6 7 9] 5)
1612921458679:(make100.evosim.logic/pop->bin [0 1 2 3 4 5 6 7 8 9] 5)
1612921916510:(make100.evosim.logic/pop->bin (range 100) 5)
1612921986753:(def d *1)
1612921991814:(doc frequency)
1612922010730:(doc frequencies)
1612922017950:(doc frequencies-by)
1612922047647:(make100.evosim.logic/pop->bin (range 100) 5)
1612922055404:(doc group-by)
1612922071921:(group-by #(quot % 5) (range 100))
1612922186770:(pop->freq (range 100) 5)
1612922198463:(make100.evosim.logic/pop->freq (range 100) 5)
1612922223659:(make100.evosim.logic/pop->freq (range 101) 5)
1612922347971:(make100.evosim.logic/normalize-freq (make100.evosim.logic/pop->freq (range 100) 5) 50)
1612922390225:(make100.evosim.logic/pop->freq (range 100) 5)
1612922426212:(\n \n )
1612922429432:(make100.evosim.logic/pop->freq (range 100) 5)
1612922439355:(def a *1)
1612922455832:(make100.evosim.logic/normalize-freq a 50)
1612922466678:(make100.evosim.logic/normalize-freq a 200)
1612922547907:(next-generation a identity (fn [_] 1))
1612922560124:(make100.evosim.logic/next-generation a identity (fn [_] 1))
1612922570246:(make100.evosim.logic/next-generation a identity (fn [_] 1) 5)
1612922581491:a
1612922592737:(def n (apply + (vals a)))
1612922594155:n
1612922645046:(map (fn [[deg cnt]] (repeatedly (* cnt 1) deg)) a)
1612922689036:(map even a)
1612922702554:a
1612922709342:(map vec a)
1612922723099:(map (fn [[deg cnt]] cnt) a)
1612922737616:(map (fn [[deg cnt]] (repeteadly 1 (rand))) a)
1612922745706:(map (fn [[deg cnt]] (repeatedly 1 (rand))) a)
1612922755044:(map (fn [[deg cnt]] (repeatedly 1 #(rand))) a)
1612922796928:(make100.evosim.logic/next-generation a identity (fn [_] 1) 5)
1612922817887:(map (fn [[deg cnt]] (repeatedly (* cnt 1) (fn [_] deg)) a)\n     )
1612922832039:(map (fn [[deg cnt]] (repeatedly (* cnt 1) (fn [_] deg))) a)
1612922846527:(flatten *1)
1612922865611:(make100.evosim.logic/pop->freq *1 5)
1612922905450:(make100.evosim.logic/normalize-freq *1 n)
1612923000625:(group-by #(quot % 5) (range 20))
1612923015892:(group-by #(* 5 (quot % 5)) (range 20))
1612923046044:(make100.evosim.logic/next-generation a identity (fn [_] 1) 5)
1612923051775:a
1612923070220:(def p (make100.evosim.logic/pop->feq (range 100) 5))
1612923077147:(def p (make100.evosim.logic/pop->freq (range 100) 5))
1612923078967:p
1612923096048:(def n (apply + (keys p)))
1612923097067:n
1612923109108:(def n (apply + (vals p)))
1612923110473:n
1612923169576:(flatten (map (fn [[deg cnt]] (repeatedly (* cnt 1) (fn [_] deg))) p))
1612923185350:(make100.evosim.logic/pop->freq *1 5)
1612923210681:(make100.evosim.logic/normalize-freq *1 n)
1612923264156:(make100.evosim.logic/next-generation (make100.evosim.logic/pop->freq (range 100) 5) identity (fn [_] 1) 5)
1612923316344:(make100.evosim.logic/next-generation (make100.evosim.logic/pop->freq (range 100) 5) identity (fn [_] 2) 5)
1612923338700:(make100.evosim.logic/next-generation (make100.evosim.logic/pop->freq (range 100) 5) identity (fn [x] x) 5)
1612923358391:(sort *1)
1612923550063:(make100.evosim.logic/mutate-with-prob 30 (rand))
1612923558539:(make100.evosim.logic/mutate-with-prob 30 #(rand))
1613001465760:(make100.evosim.core/dummy-pop 100 30)
1613001471469:(sort *1)
1613001799370:(make100.evosim.core/dummy-pop 100 60)
1613003155446:(min 1 2 34)
1613093988106:(vec 1 2)
1613093991287:(vector 1 2)
1613094113396:(make100.evosim.core/dummy-pop 10 1000)
1613094116876:(def a *)
1613094125523:(apply + (vals a))
1613094132941:(vals a)
1613094151205:(make100.evosim.core/dummy-pop 10 1000)
1613094154628:(def a *1)
1613094155547:a
1613094160786:(apply + (vals a))
1613610701945:(map-index (fn [[x y]] (println x y)) [:a :b :c])
1613610709702:(map-indexed (fn [[x y]] (println x y)) [:a :b :c])
1613610718709:(map-indexed (fn [[x y]] (println x)) [:a :b :c])
1613610727176:(map-indexed (fn [x y] (println x)) [:a :b :c])
1613610732928:(map-indexed (fn [x y] (println x y)) [:a :b :c])
1613611015702:(fn [x] (loop [a x] (if (< a 0) a (do (println a) (recur (dec a))))))
1613611020652:(def f *1)
1613611022922:(type f)
1613611025616:(f 5)
1613695127995:(map even? (range 10))
1613695229195:(+ 1 2)
1613695679739:(def xStep (/ 200 (/ 360 30)))
1613695812048:(def relX (mod 0 200))
1613695815967:relX
1613695819676:(type relX)
1613695827833:(float? relX)
1613695836475:(int? relX)
1613695869736:(def xStep (/ 200 (/ 360 30)))
1613695872826:xStep
1613695890401:(def x 0)
1613695902093:(def xy (mod 0 200))
1613695905282:x
1613695906408:xy
1613695922491:(- xStep (mod xy xStep))
1613695946434:(def x (+ x *1))
1613695953379:(def xy (+ xy *2))
1613695954365:x
1613695955853:xy
1613782477490:(quot 10 40)
1613782486799:(quot 30 40)
1613782501244:(quot 45 40)
1613782579422:(* (quot 10 40) 40)
1613782586665:(* (quot 20 40) 40)
1613782596553:(* (quot 50 40) 40)
1613782601779:(* (quot 80 40) 40)
1613782606060:(* (quot 90 40) 40)
1614046179688:(hash 1 2 3)
1614046184796:(hash 1)
1614046189048:(doc hash)
1614046198832:(hash :a)
1614046205406:(hash "fs")
1614046229774:(hash #(+ 1 %))
1614046235628:(hash #(+ 2 %))
1614046243680:(hash #(+ 2 % 2))
1614046250558:(hash #(+ 2 %))
1614046263526:(hash 1)
1614047904318:(make100.evosim.logic/sample-tr-norm -1 1 0 1)
1614048070543:(def f (fn [] (make100.evosim.logic/sa-tr-norm -1 1 0 1)\n         \n         \n         \n         )\n  )
1614048267994:(def f (fn [] (logic/sample-tr-norm -1 1 0 1)))
1614048279953:(def f (fn [] (make100.evosim.logic/sample-tr-norm -1 1 0 1)))
1614048283170:(f)
1614048315522:(-> f (partial make100.evosim.logic/mutate-with-prob))
1614048319104:(def g *1)
1614048324670:(g 0)
1614048331833:(g 60)
1614048464094:f
1614048504711:(def ff (fn [] (/ (+ 1 (f)) 2)))
1614048508277:(ff)
1614048524184:(-> ff (partial make100.evosim.logic/mutate-with-prob))
1614048528063:(def g *1)
1614048531694:(g 60)
1614048590496:(make100.evosim.logic/mutate-with-prob (fn [] 0.5) 60)
1614048597910:(make100.evosim.logic/mutate-with-prob (fn [] 0.5) 70)
1614048602600:(make100.evosim.logic/mutate-with-prob (fn [] 0.8) 70)
1614048610604:(make100.evosim.logic/mutate-with-prob (fn [] 0.8) 220)
1614048629047:(ff)
1614048640171:(make100.evosim.logic/mutate-with-prob ff 220)
1614048669664:(-> ff (partial make100.evosim.logic/mutate-with-prob))
1614048674838:(def a *1)
1614048679357:(a 60)
1614048880845:(->> (fn [] \n								(-> (logic/sample-tr-norm -1 1 0 1)\n									(+ 1)\n									(/ 2)))\n							 (partial logic/mutate-with-prob))
1614048907514:(->> (fn [] \n								(-> (make100.evosim.logic/sample-tr-norm -1 1 0 1)\n									(+ 1)\n									(/ 2)))\n							 (partial make100.evosim.logic/mutate-with-prob))
1614048911064:(def g *1)
1614048914217:(g 60)
1614129059155:(->> (fn [] \n								(-> (make100.evosim.logic/sample-tr-norm -1 1 0 1)\n									(+ 1)\n									(/ 2)))\n							 (partial make100.evosim.logic/mutate-with-prob))
1614129063215:(def g *1)
1614129068250:(g 50)
1614129187924:(def p (make100.evosim.core/dummy-pop 30 1000))
1614129190166:p
1614129234508:(make100.evosim.logic/next-generation p g (fn [x] (/ x 360)) 30)
1614129284415:(make100.evosim.logic/next-generation *1 g (fn [x] (/ x 360)) 30)
1614130418418:cw
1614131034334:(->> (fn [] 0.5) (partial make100.evosim.logic/mutate-with-prob))
1614131038705:(def g *1)
1614131041473:(g 100)
1614131047244:(g 10)
1614131049826:(g 0)
1614131052616:(g 360)
1614131066431:(g 359)
1614131123432:(def p (make100.evosim.core/dummy-pop 30 1000))
1614131125161:p
1614131136197:(def p (make100.evosim.core/dummy-pop 30 1000))
1614131137207:p
1614131186823:(make100.evosim.logic/next-generation p g (fn [x] (/ x 360)) 30)
1614131199531:(make100.evosim.logic/next-generation *1 g (fn [x] (/ x 360)) 30)
1614131276384:(g 100)
1614131297780:(make100.evosim.logic/next-generation p g (fn [x] 1) 30)
1614131308534:(make100.evosim.logic/next-generation *1 g (fn [x] 1) 30)
1614131646394:(make100.evosim.logic/next-generation p (fn [] 0.8) (fn [x] 1) 30)
1614131651799:p
1614131665960:(make100.evosim.logic/next-generation p (fn [x] 0.8) (fn [x] 1) 30)
1614131710825:(make100.evosim.logic/next-generation p (partial make100.evosim.logic/mutate-with-prob (fn [x] 0.8)) (fn [x] 1) 30)
1614131725113:(make100.evosim.logic/next-generation *1 (partial make100.evosim.logic/mutate-with-prob (fn [x] 0.8)) (fn [x] 1) 30)
1614132664679:1
1614217333857:(range 0 1 (/ 1 10))
1614217829895:(make100.evosim.logic/pdf->mutate-vector (partial make100.evosim.logic/truncated-normal -1 1 0 1) 10)
1614217843225:(make100.evosim.logic/pdf->mutate-vector (partial make100.evosim.logic/truncated-normal -1 1 0 0.01) 10)
1614217961518:(make100.evosim.logic/pdf->mutate-vector (fn [x] (-> ( make100.evosim.logic/truncated-normal -1 1 0 0.01 x) (+ 1) (/ 2))) 10)
1614217979071:(make100.evosim.logic/pdf->mutate-vector (fn [x] (-> ( make100.evosim.logic/truncated-normal -1 1 0 0.01 x) (+ 1) (/ 2))) 10\n                                         )
1614217989700:(make100.evosim.logic/pdf->mutate-vector (fn [x] (-> ( make100.evosim.logic/truncated-normal -1 1 0 1 x) (+ 1) (/ 2))) 10)
1614218031610:(make100.evosim.logic/pdf->mutate-vector (partial make100.evosim.logic/truncated-normal 0 1 0.5 0.01) 10)
1614218050293:(make100.evosim.logic/pdf->mutate-vector (partial make100.evosim.logic/truncated-normal 0 1 0.5 1) 10)
1614218057023:(make100.evosim.logic/pdf->mutate-vector (partial make100.evosim.logic/truncated-normal 0 1 0.5 0.5) 10)
1614218651437:(for [i (range 10) j (range i)] [i j]])
1614218655695:(for [i (range 10) j (range i)] [i j])
1614219039578:(quot 360 10)
1614219077669:(* (/ 360 10) 10)
1614219092925:(* (/ 360 10) 0)
1614219094937:(* (/ 360 10) 1)
1614219100414:(* (/ 360 10) 2)
1614219102398:(* (/ 360 10) 3)
1614219122907:(* (/ 360 6) 1)
1614219125351:(* (/ 360 6) 2)
1614219184286:(make100.evosim.core/dummy-pop 30 100)
1614219189353:(def p *1)
1614219282926:(def mt (make100.evosim.logic/pdf->mutate-vector (partial make100.evosim.logic/truncated-normal 0 1 0.5 1) 12))
1614219284227:mt
1614219321663:(make100.evosim.logic/repl-dyn p mt (fn [x] 1) 12)
1614219430122:(get mt 1)
1614219431739:mt
1614219478113:(get [1 2] 1)
1614219483394:(def mt (make100.evosim.logic/pdf->mutate-vector (partial make100.evosim.logic/truncated-normal 0 1 0.5 1) 12))
1614219486503:mt
1614219491077:(make100.evosim.logic/repl-dyn p mt (fn [x] 1) 12)
1614219533426:(make100.evosim.logic/repl-dyn *1 mt (fn [x] 1) 12)
1614219555491:mt
1614219893795:(def mt (make100.evosim.logic/pdf->mutate-vector (partial make100.evosim.logic/truncated-normal 0 1 0.5 1) 12))
